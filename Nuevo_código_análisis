# analisis_tiendas.py

import pandas as pd
import matplotlib.pyplot as plt

plt.style.use('ggplot')  # Estilo visual

# ================================
# 1. CARGA DE DATOS
# ================================

def cargar_datos():
    urls = [
        "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_1%20.csv",
        "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_2.csv",
        "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_3.csv",
        "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_4.csv",
    ]
    return [pd.read_csv(url) for url in urls]

# ================================
# 2. ANÁLISIS DE FACTURACIÓN
# ================================

def calcular_facturacion_total(df):
    return float(df["Precio"].sum())

# ================================
# 3. VENTAS POR CATEGORÍA
# ================================

def ventas_por_categoria(df):
    return df.groupby("Categoría del Producto")["Precio"].sum()

# ================================
# 4. CALIFICACIÓN PROMEDIO
# ================================

def calificacion_promedio(df):
    return round(df["Calificación"].mean(), 1)

# ================================
# 5. PRODUCTOS MÁS Y MENOS VENDIDOS
# ================================

def productos_extremos(df):
    agrupado = df.groupby("Producto")["Precio"].sum().sort_values(ascending=False)
    return agrupado.head(1), agrupado.tail(1)

# ================================
# 6. COSTO DE ENVÍO PROMEDIO
# ================================

def costo_envio_promedio(df):
    return round(df["Costo de envío"].mean(), 1)

# ================================
# 7. VISUALIZACIONES
# ================================

def graficar_facturacion(facturacion):
    df = pd.DataFrame({"Tienda": [f"Tienda{i+1}" for i in range(4)], "Facturación": facturacion})
    df.plot(kind="bar", x="Tienda", y="Facturación", color='blue', title="Facturación total por tienda")
    plt.ylabel("Total (USD)")
    plt.tight_layout()
    plt.savefig("facturacion_tiendas.png")
    plt.show()

def graficar_calificaciones(calificaciones):
    tiendas = [f"Tienda{i+1}" for i in range(4)]
    plt.plot(tiendas, calificaciones, marker='o', linestyle='--', color='green')
    plt.title("Calificación promedio por tienda")
    plt.ylabel("Calificación")
    plt.tight_layout()
    plt.savefig("calificaciones_tiendas.png")
    plt.show()

def graficar_productos_extremos(maximo, minimo):
    productos = maximo.index.tolist() + minimo.index.tolist()
    valores = maximo.values.tolist() + minimo.values.tolist()
    colores = ['green', 'red']
    plt.figure(figsize=(8, 5))
    plt.bar(productos, valores, color=colores)
    plt.title("Productos más y menos vendidos")
    plt.xlabel("Producto")
    plt.ylabel("Suma de precios")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("productos_extremos.png")
    plt.show()

def graficar_costos_envio(costos):
    tiendas = [f"Tienda{i+1}" for i in range(4)]
    plt.bar(tiendas, costos, color='red')
    plt.title("Costo de envío promedio por tienda")
    plt.ylabel("Costo promedio (USD)")
    plt.tight_layout()
    plt.savefig("costo_envio_promedio.png")
    plt.show()

# ================================
# 8. CONCLUSIÓN FINAL
# ================================

def imprimir_conclusiones():
    print("\n\033[1mConclusiones del Análisis:\033[0m")
    print("- La Tienda 4 presenta la facturación más baja y podría representar una oportunidad de reestructuración o venta.")
    print("- La Tienda 1, pese a tener mayor costo de envío, también genera las mayores ventas, justificando su inversión.")
    print("- Las calificaciones de todas las tiendas son similares, por lo que la experiencia de cliente no es un factor diferenciador clave.")

# ================================
# MAIN
# ================================

def main():
    tiendas = cargar_datos()

    # Facturación
    facturacion = [calcular_facturacion_total(t) for t in tiendas]
    graficar_facturacion(facturacion)

    # Calificación promedio
    calificaciones = [calificacion_promedio(t) for t in tiendas]
    graficar_calificaciones(calificaciones)

    # Productos extremos tienda 1
    maximo, minimo = productos_extremos(tiendas[0])
    graficar_productos_extremos(maximo, minimo)

    # Costo envío promedio
    costos = [costo_envio_promedio(t) for t in tiendas]
    graficar_costos_envio(costos)

    imprimir_conclusiones()

if __name__ == "__main__":
    main()
